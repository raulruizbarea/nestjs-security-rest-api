openapi: 3.0.0
paths:
  /api/v1/subjects:
    post:
      operationId: SubjectsController_create
      summary: Create a new subject
      description: Create a new subject
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubjectDto"
      responses:
        "201":
          description: The subject has been successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSubjectResponseDto"
        "500":
          description: Internal Server Error.
      tags:
        &a1
        - Subjects
      security:
        &a2
        - access-token: []
    get:
      operationId: SubjectsController_findAll
      summary: Find all subjects
      description: Find all subjects
      parameters: []
      responses:
        "200":
          description: The subject has been found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SubjectResponseDto"
      tags: *a1
      security: *a2
    delete:
      operationId: SubjectsController_removeAll
      summary: Delete all subjects
      description: Delete all subjects
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a1
      security: *a2
  "/api/v1/subjects/{code}":
    get:
      operationId: SubjectsController_findOne
      summary: Find a subject by code
      description: Find a subject by code
      parameters:
        - name: code
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: The subject has been found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubjectResponseDto"
      tags: *a1
      security: *a2
    patch:
      operationId: SubjectsController_update
      summary: Update a subject by code
      description: Update a subject by code
      parameters:
        - name: code
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubjectDto"
      responses:
        "200":
          description: ""
      tags: *a1
      security: *a2
    delete:
      operationId: SubjectsController_remove
      summary: Delete a subject by code
      description: Delete a subject by code
      parameters:
        - name: code
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a1
      security: *a2
  /api/v1/health:
    get:
      operationId: HealthController_check
      summary: Get the health of the system
      description: Get the health of the system
      parameters: []
      responses:
        "200":
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      &a3
                      database:
                        &a4
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example: *a3
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
        "503":
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example: *a3
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        &a5
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database: *a4
                      redis: *a5
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
      tags:
        &a9
        - Health
  /api/v1/health/university-service:
    get:
      operationId: HealthController_checkUniversityService
      summary: Get the health of university service database
      description: Get the health of university service database
      parameters: []
      responses:
        "200":
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      &a6
                      database:
                        &a7
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example: *a6
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
        "503":
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example: *a6
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        &a8
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database: *a7
                      redis: *a8
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
      tags: *a9
info:
  title: NestJS Security REST API
  description: Open University of Catalonia
  version: "1.0"
  contact: {}
tags: []
servers:
  - url: http://localhost:3000
    description: null
    variables: null
components:
  securitySchemes:
    access_token:
      scheme: Bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: Enter JWT token
      in: header
  schemas:
    CreateSubjectDto:
      type: object
      properties:
        academicalYear:
          type: string
        code:
          type: string
        lang:
          type: string
          enum:
            &a10
            - CAS
            - CAT
            - ANG
        name:
          type: string
        description:
          type: string
      required:
        - academicalYear
        - code
        - lang
        - name
        - description
    CreateSubjectResponseDto:
      type: object
      properties:
        code:
          type: string
      required:
        - code
    SubjectResponseDto:
      type: object
      properties:
        academicalYear:
          type: string
        code:
          type: string
        lang:
          type: string
          enum: *a10
        name:
          type: string
        description:
          type: string
      required:
        - academicalYear
        - code
        - lang
        - name
        - description
    UpdateSubjectDto:
      type: object
      properties:
        academicalYear:
          type: string
        code:
          type: string
        lang:
          type: string
          enum: *a10
        name:
          type: string
        description:
          type: string
